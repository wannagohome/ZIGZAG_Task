//
//  TestFunctions.swift
//  ZIGZAG_task (bowling-score-calculator)
//
//  Created by Peter Jang on 02/04/2019.
//  Copyright Â© 2019 Peter Jang. All rights reserved.
//

import Foundation

func testBowling() -> String {
    var isSuccess: Bool = true
    var caseNumber: Int = 1
    var result: String = ""
    let cases = [("AAAAAAAAAAAA", [30, 60, 90, 120, 150, 180, 210, 240, 270, 300]),
                 ("82A900519A", [20, 39, 48, 53, 73]),
                 ("533334AAA5337AA43", [8,14,21,51,76,94,102,122,146,163]),
                 ("71334545AAAA5523", [8,14,23,32,62,92,117,137,149,154]),
                 ("825490AA5553639191A", [15,24,33,58,78,93,101,110,129,149]),
                 ("825490AA55536391A91", [15,24,33,58,78,93,101,110,130,150]),
                 ("3237AAAA43333336", [5,25,55,85,109,126,133,139,145,154]),
                 ("825490AA5553639199", [-1]),
                 ("875490AA5553639190", [-1]),
                 ("825490AA55536391915", [15,24,33,58,78,93,101,110,129,144]),
                 ("825490AA5", [15,24,33,58]),
                 ("8", []),
                 ("82", []),
                 ("825", [15]),
                 ("8254", [15, 24]),
                 ("82549", [15, 24]),
                 ("825490", [15, 24, 33]),
                 ("825490A", [15, 24, 33]),
                 ("825490AA", [15, 24, 33])]
    
    cases.forEach {
        let testResult: [Int] = Bowling(input: $0).calculateForTest()
        if testResult != $1 {
            result += "Fail case (number \(caseNumber)) : expected : \($1), result : \(testResult)) \n"
            isSuccess = false
        }
        caseNumber += 1
    }
    if isSuccess {
        return "Test Success"
    } else {
        return result
    }
}


func testAlterDate() -> String {
    var isSuccess: Bool = true
    var result: String = ""
    let cases = [("PM 02:16:24", 3419, "| PM 02:16:24 | 3419 | 15:13:23 |"),
                 ("PM 07:07:04", 8327, "| PM 07:07:04 | 8327 | 21:25:51 |"),
                 ("PM 02:28:22", 9146, "| PM 02:28:22 | 9146 | 17:00:48 |"),
                 ("PM 07:36:54", 7198, "| PM 07:36:54 | 7198 | 21:36:52 |"),
                 ("AM 05:38:02", 9883, "| AM 05:38:02 | 9883 | 08:22:45 |"),
                 ("AM 12:54:50", 6519, "| AM 12:54:50 | 6519 | 02:43:29 |"),
                 ("AM 05:53:02", 308, "| AM 05:53:02 | 308 | 05:58:10 |"),
                 ("AM 05:00:26", 7209, "| AM 05:00:26 | 7209 | 07:00:35 |"),
                 ("AM 04:32:22", 2809, "| AM 04:32:22 | 2809 | 05:19:11 |"),
                 ("AM 07:00:50", 1683, "| AM 07:00:50 | 1683 | 07:28:53 |"),
                 ("PM 03:58:01", 4812, "| PM 03:58:01 | 4812 | 17:18:13 |"),
                 ("PM 08:14:58", 5087, "| PM 08:14:58 | 5087 | 21:39:45 |"),
                 ("PM 11:25:13", 4366, "| PM 11:25:13 | 4366 | 00:37:59 |"),
                 ("AM 06:45:59", 9929, "| AM 06:45:59 | 9929 | 09:31:28 |"),
                 ("AM 04:31:47", 4462, "| AM 04:31:47 | 4462 | 05:46:09 |"),
                 ("PM 02:43:17", 2823, "| PM 02:43:17 | 2823 | 15:30:20 |"),
                 ("AM 12:09:04", 2496, "| AM 12:09:04 | 2496 | 00:50:40 |"),
                 ("AM 10:02:06", 2671, "| AM 10:02:06 | 2671 | 10:46:37 |"),
                 ("PM 08:16:20", 3692, "| PM 08:16:20 | 3692 | 21:17:52 |"),
                 ("AM 01:33:17", 8048, "| AM 01:33:17 | 8048 | 03:47:25 |"),
                 ("PM 07:24:02", 6286, "| PM 07:24:02 | 6286 | 21:08:48 |"),
                 ("AM 08:42:46", 5338, "| AM 08:42:46 | 5338 | 10:11:44 |"),
                 ("AM 05:48:22", 996, "| AM 05:48:22 | 996 | 06:04:58 |"),
                 ("AM 11:08:32", 9950, "| AM 11:08:32 | 9950 | 13:54:22 |"),
                 ("PM 01:50:23", 231, "| PM 01:50:23 | 231 | 13:54:14 |"),
                 ("PM 06:48:08", 9219, "| PM 06:48:08 | 9219 | 21:21:47 |"),
                 ("PM 09:31:57", 1320, "| PM 09:31:57 | 1320 | 21:53:57 |"),
                 ("AM 09:54:18", 3069, "| AM 09:54:18 | 3069 | 10:45:27 |"),
                 ("PM 04:19:39", 6775, "| PM 04:19:39 | 6775 | 18:12:34 |"),
                 ("AM 04:30:13", 8444, "| AM 04:30:13 | 8444 | 06:50:57 |"),
                 ("PM 08:17:43", 7692, "| PM 08:17:43 | 7692 | 22:25:55 |"),
                 ("PM 02:31:12", 5508, "| PM 02:31:12 | 5508 | 16:03:00 |"),
                 ("AM 01:08:47", 7771, "| AM 01:08:47 | 7771 | 03:18:18 |"),
                 ("AM 03:07:33", 3350, "| AM 03:07:33 | 3350 | 04:03:23 |"),
                 ("PM 05:30:20", 6934, "| PM 05:30:20 | 6934 | 19:25:54 |"),
                 ("AM 03:34:17", 531, "| AM 03:34:17 | 531 | 03:43:08 |"),
                 ("PM 11:38:17", 2246, "| PM 11:38:17 | 2246 | 00:15:43 |"),
                 ("AM 01:07:57", 3014, "| AM 01:07:57 | 3014 | 01:58:11 |"),
                 ("AM 05:03:03", 5945, "| AM 05:03:03 | 5945 | 06:42:08 |"),
                 ("PM 02:14:48", 7835, "| PM 02:14:48 | 7835 | 16:25:23 |"),
                 ("PM 09:33:19", 6187, "| PM 09:33:19 | 6187 | 23:16:26 |"),
                 ("PM 04:22:49", 2618, "| PM 04:22:49 | 2618 | 17:06:27 |"),
                 ("PM 10:57:14", 7256, "| PM 10:57:14 | 7256 | 00:58:10 |"),
                 ("AM 05:27:20", 2840, "| AM 05:27:20 | 2840 | 06:14:40 |"),
                 ("PM 12:19:33", 6939, "| PM 12:19:33 | 6939 | 14:15:12 |"),
                 ("AM 06:14:15", 357, "| AM 06:14:15 | 357 | 06:20:12 |"),
                 ("AM 05:10:16", 6925, "| AM 05:10:16 | 6925 | 07:05:41 |"),
                 ("AM 11:10:54", 8121, "| AM 11:10:54 | 8121 | 13:26:15 |"),
                 ("PM 05:19:39", 9959, "| PM 05:19:39 | 9959 | 20:05:38 |"),
                 ("AM 06:50:36", 1084, "| AM 06:50:36 | 1084 | 07:08:40 |"),
                 ("AM 08:24:29", 3752, "| AM 08:24:29 | 3752 | 09:27:01 |"),
                 ("PM 02:26:45", 6751, "| PM 02:26:45 | 6751 | 16:19:16 |"),
                 ("PM 10:24:58", 4177, "| PM 10:24:58 | 4177 | 23:34:35 |"),
                 ("AM 10:17:17", 1938, "| AM 10:17:17 | 1938 | 10:49:35 |"),
                 ("PM 09:57:03", 6451, "| PM 09:57:03 | 6451 | 23:44:34 |"),
                 ("AM 08:48:08", 2958, "| AM 08:48:08 | 2958 | 09:37:26 |"),
                 ("AM 12:38:34", 8011, "| AM 12:38:34 | 8011 | 02:52:05 |"),
                 ("AM 06:04:33", 4203, "| AM 06:04:33 | 4203 | 07:14:36 |"),
                 ("PM 04:38:04", 6561, "| PM 04:38:04 | 6561 | 18:27:25 |"),
                 ("AM 03:27:02", 8193, "| AM 03:27:02 | 8193 | 05:43:35 |"),
                 ("PM 09:04:43", 2814, "| PM 09:04:43 | 2814 | 21:51:37 |"),
                 ("PM 12:05:03", 1640, "| PM 12:05:03 | 1640 | 12:32:23 |"),
                 ("AM 08:37:25", 517, "| AM 08:37:25 | 517 | 08:46:02 |"),
                 ("AM 08:19:01", 1426, "| AM 08:19:01 | 1426 | 08:42:47 |"),
                 ("PM 01:11:31", 440, "| PM 01:11:31 | 440 | 13:18:51 |"),
                 ("PM 12:15:35", 3681, "| PM 12:15:35 | 3681 | 13:16:56 |"),
                 ("AM 07:22:58", 2036, "| AM 07:22:58 | 2036 | 07:56:54 |"),
                 ("AM 01:25:39", 9184, "| AM 01:25:39 | 9184 | 03:58:43 |"),
                 ("PM 02:26:41", 8421, "| PM 02:26:41 | 8421 | 16:47:02 |"),
                 ("PM 05:34:57", 6735, "| PM 05:34:57 | 6735 | 19:27:12 |"),
                 ("AM 08:40:22", 9461, "| AM 08:40:22 | 9461 | 11:18:03 |"),
                 ("AM 03:37:47", 3210, "| AM 03:37:47 | 3210 | 04:31:17 |"),
                 ("PM 06:02:29", 3457, "| PM 06:02:29 | 3457 | 19:00:06 |"),
                 ("PM 05:00:39", 6985, "| PM 05:00:39 | 6985 | 18:57:04 |"),
                 ("PM 04:13:24", 822, "| PM 04:13:24 | 822 | 16:27:06 |"),
                 ("PM 05:30:53", 8649, "| PM 05:30:53 | 8649 | 19:55:02 |"),
                 ("PM 08:43:07", 9696, "| PM 08:43:07 | 9696 | 23:24:43 |"),
                 ("PM 08:43:56", 5132, "| PM 08:43:56 | 5132 | 22:09:28 |"),
                 ("AM 03:26:08", 4512, "| AM 03:26:08 | 4512 | 04:41:20 |"),
                 ("PM 10:54:10", 4064, "| PM 10:54:10 | 4064 | 00:01:54 |"),
                 ("AM 05:34:32", 6684, "| AM 05:34:32 | 6684 | 07:25:56 |"),
                 ("AM 12:13:12", 9045, "| AM 12:13:12 | 9045 | 02:43:57 |"),
                 ("AM 07:05:42", 6557, "| AM 07:05:42 | 6557 | 08:54:59 |"),
                 ("AM 10:50:48", 2717, "| AM 10:50:48 | 2717 | 11:36:05 |"),
                 ("PM 07:29:01", 5774, "| PM 07:29:01 | 5774 | 21:05:15 |"),
                 ("PM 04:21:28", 632, "| PM 04:21:28 | 632 | 16:32:00 |"),
                 ("AM 12:41:29", 4674, "| AM 12:41:29 | 4674 | 01:59:23 |"),
                 ("PM 12:34:17", 9111, "| PM 12:34:17 | 9111 | 15:06:08 |"),
                 ("PM 08:07:54", 5685, "| PM 08:07:54 | 5685 | 21:42:39 |"),
                 ("PM 06:07:36", 2385, "| PM 06:07:36 | 2385 | 18:47:21 |"),
                 ("AM 07:44:19", 6750, "| AM 07:44:19 | 6750 | 09:36:49 |"),
                 ("AM 10:04:48", 2088, "| AM 10:04:48 | 2088 | 10:39:36 |"),
                 ("PM 12:05:53", 9156, "| PM 12:05:53 | 9156 | 14:38:29 |"),
                 ("AM 09:41:22", 2031, "| AM 09:41:22 | 2031 | 10:15:13 |"),
                 ("PM 12:29:31", 2434, "| PM 12:29:31 | 2434 | 13:10:05 |"),
                 ("AM 11:12:12", 3616, "| AM 11:12:12 | 3616 | 12:12:28 |"),
                 ("AM 08:29:40", 6188, "| AM 08:29:40 | 6188 | 10:12:48 |"),
                 ("PM 09:20:11", 5248, "| PM 09:20:11 | 5248 | 22:47:39 |"),
                 ("PM 05:58:49", 1432, "| PM 05:58:49 | 1432 | 18:22:41 |"),
                 ("AM 07:05:00", 9902, "| AM 07:05:00 | 9902 | 09:50:02 |"),
                 ("PM 03:41:49", 5856, "| PM 03:41:49 | 5856 | 17:19:25 |")]
    cases.forEach {
        if solve(timeString: $0, N: $1) != $2 {
            result += "Fail case : expected : \($2), result : \(solve(timeString: $0, N: $1)) \n"
            isSuccess = false
        }
    }
    if isSuccess {
        return "Test Success"
    } else {
        return result
    }
}
